@import "variables";

@mixin container($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter/2;
    padding-left: $gutter/2;
    margin-right: auto;
    margin-left: auto;
    box-sizing: border-box;
}

@mixin row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter/2;
    margin-left: -$gutter/2;
}

@mixin col($gutter: $grid-gutter-width, $auto: false) {
    position: relative;
    width: 100%;
    padding-right: #{$gutter/2}px;
    padding-left: #{$gutter/2}px;
    @if ($auto) {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 0;
        max-width: 100%;
    }
}

@mixin mediaquery($width, $min-width: true) {
    @if $min-width {
        @media (min-width: $width) {
            @content;
        }
    } @else {
        @media (max-width: $width) {
            @content;
        }
    }
}

@mixin mediaquery-min-width($width) {
    @include mediaquery($width, true);
}

@mixin mediaquery-max-width($width) {
    @include mediaquery($width, false);
}

@mixin col-order($order: 1) {
    order: $order;
}

@mixin col-order-first() {
    @include col-order(-1);
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    padding: $padding-y $padding-x;
    line-height: $line-height;
    border-radius: $border-radius;
    // Manually declare to provide an override to the browser default
}

@mixin hover() {
    &:hover {
        @content;
    }
}

@mixin after() {
    &:after {
        @content;
    }
}

@mixin focus() {
    &:focus {
        @content;
    }
}

@mixin hide-on($resolution: "s") {
    $media-query-val: map-get($container-max-widths, $resolution);
    @include mediaquery($media-query-val, false) {
        display: none;
    }
}

@mixin show-on($resolution: "s") {
    $media-query-val: map-get($grid-breakpoints, $resolution);
    @include mediaquery($media-query-val, true) {
        display: flex;
    }
}

@function pxToRem($px) {
  @return ($px / 16) * 1rem;
}
